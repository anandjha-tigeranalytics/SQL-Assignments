*******************INDEX**************************

Question 1:

You're managing a database for an inventory system. Create a non-clustered index on the "products" table that includes the columns "category," "stock_qty," and "price" to improve the performance of queries that filter products based on category, stock quantity, and price range.

Products Table:

| ProductID | ProductName  | Category  | StockQty | Price |
|-----------|--------------|-----------|----------|-------|
| 1         | Product A    | Electronics | 50      | 100.00 |
| 2         | Product B    | Clothing    | 30      | 75.00  |
| 3         | Product C    | Electronics | 40      | 120.00 |
| 4         | Product D    | Clothing    | 20      | 150.00 |


Question 2:
You're working with a database for a content management system. Create a clustered index on the "articles" table to improve the performance of queries that retrieve articles based on their publication date in descending order.

Articles Table:

| ArticleID | Title         | Content     | PublicationDate |
|-----------|---------------|-------------|-----------------|
| 1         | Article A     | ...         | 2023-01-10      |
| 2         | Article B     | ...         | 2023-02-15      |
| 3         | Article C     | ...         | 2023-03-05      |
| 4         | Article D     | ...         | 2023-04-20      |



Question 3: 
You are working with a database containing a large amount of product data. Users frequently search for products by their category IDs, and you want to optimize these search queries using B-tree indexes.

Write an SQL statement to create a B-tree index named idx_category on the category_id column to optimize search queries for products by category.


Table: products

| product_id | product_name | category_id | price   |
|------------|--------------|-------------|---------|
| 1          | Laptop       | 101         | 1000.00 |
| 2          | Smartphone   | 102         | 500.00  |
| 3          | Tablet       | 101         | 300.00  |
| 4          | Camera       | 103         | 600.00  |
| ...        | ...          | ...         | ...     |


Question 4:
You are developing a database for a library. Users frequently search for books by genre, and you want to optimize these search queries.
Write an SQL statement to create a bitmap index named idx_genre on the genre column to optimize search queries for books by genre.

Table: books

| book_id | title                | author          | genre         |
|---------|----------------------|-----------------|---------------|
| 1       | The Great Gatsby     | F. Scott Fitzgerald | Fiction   |
| 2       | To Kill a Mockingbird | Harper Lee         | Fiction   |
| 3       | 1984                 | George Orwell      | Dystopian |
| 4       | Pride and Prejudice   | Jane Austen        | Romance   |
| ...     | ...                  | ...             | ...         |


Question 5: 
You are building a database for a news website. Users need to search for articles based on keywords within the article text. You want to optimize text-based search queries using a full-text index.
Write an SQL statement to create a full-text index named idx_article_text on the article_text column to optimize keyword-based search queries within articles.


Table: articles

| article_id | title            | article_text                              |
|------------|------------------|-------------------------------------------|
| 1          | Tech News        | The latest tech trends and innovations.   |
| 2          | Sports Update    | Scores, updates, and highlights from sports. |
| 3          | Cooking Recipes  | Delicious recipes from around the world.  |
| 4          | Travel Blog      | Explore the most exotic destinations.     |
| ...        | ...              | ...                                       |



*************PARTITITON*********************************


Question 1: 
You are managing a database for an e-commerce platform, and you want to partition the order data by order date to improve query performance. The database stores orders from different years.

Write an SQL statement to create a range partition on the orders table based on the order_date column, with partitions for each year starting from 2023.

Table: orders

| order_id | order_date  | customer_id | total_amount |
|----------|------------|-------------|--------------|
| 1        | 2023-01-15 | 101         | 500.00       |
| 2        | 2023-02-10 | 102         | 300.00       |
| 3        | 2024-01-20 | 103         | 800.00       |
| 4        | 2024-02-15 | 101         | 200.00       |
| ...      | ...        | ...         | ...          |


Question 2:
You are developing a database for a car rental service, and you want to partition the vehicle data by vehicle type to improve query performance. Vehicles belong to different types.

Write an SQL statement to create a list partition on the vehicles table based on the vehicle_type column, with partitions for Sedans, SUVs, and Trucks.

Table: vehicles

| vehicle_id | vehicle_type | make    | model  | rental_price |
|------------|--------------|---------|--------|--------------|
| 1          | Sedan        | Toyota  | Camry  | 50.00        |
| 2          | SUV          | Ford    | Explorer | 70.00     |
| 3          | Sedan        | Honda   | Civic  | 45.00        |
| 4          | Truck        | Ford    | F-150  | 80.00        |
| ...        | ...          | ...     | ...    | ...          |


Question 3:
You're working with a database for a weather monitoring system. Implement hash partitioning on the "temperature_readings" table, partitioning the data based on the "location_id" column. Use a hash function to distribute data evenly across partitions. Apply this partitioning strategy for optimal performance in analyzing temperature data.

Temperature Readings Table:

| ReadingID | LocationID | ReadingDate | Temperature |
|-----------|------------|-------------|-------------|
| 1         | 101        | 2023-01-10  | 20.5        |
| 2         | 102        | 2023-02-15  | 25.0        |
| 3         | 101        | 2023-03-05  | 22.2        |
| 4         | 103        | 2023-04-20  | 18.8        |


****************** DATA DICTIONARY VIEW********************************

Question 1:
Write a query to retrieve a list of all tables in the database along with their respective column names and data types.

Question 2: 
Write an SQL query using data dictionary views to find the names of tables in the database that do not have any indexes defined.

Question 3:
Write a query to retrieve the names of all stored procedures in the database.

Question 4:
Write a query to retrieve the foreign key constraints in the database, including the constraint name, parent table, and child table.

Question 5:
You're managing a database for a library. Write a query to retrieve the list of all views in the database.


**************************SQL TUNING*********************************

Question 1: 

Consider the following query that retrieves order details. It's reported as slow. Analyze the query, identify performance issues, and propose improvements to optimize its performance.

SELECT o.order_id, o.order_date, c.customer_name, p.product_name, od.quantity, od.unit_price
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_details od ON o.order_id = od.order_id
JOIN products p ON od.product_id = p.product_id
WHERE o.order_date >= '2022-01-01' AND o.order_date < '2023-01-01';


Question 2: You have a query that retrieves sales totals by product category and month. Analyze the query plan and propose optimization techniques.

EXPLAIN ANALYZE
SELECT
    EXTRACT(MONTH FROM s.sale_date) AS month,
    p.category,
    SUM(s.amount) AS total_sales
FROM sales s
JOIN products p ON s.product_id = p.product_id
WHERE s.sale_date >= '2022-01-01' AND s.sale_date < '2023-01-01'
GROUP BY EXTRACT(MONTH FROM s.sale_date), p.category
ORDER BY EXTRACT(MONTH FROM s.sale_date), p.category;


Question 3: 
You have a query that joins multiple tables and is running slowly. How can you optimize this query without changing the result set?

SELECT c.customer_name, o.order_date, p.product_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_details od ON o.order_id = od.order_id
JOIN products p ON od.product_id = p.product_id;


Question 4:
You're managing a database for a sales platform. The following query is experiencing performance issues and is slow to execute:


SELECT c.customer_name, p.product_name, SUM(o.quantity * p.unit_price) AS total_sales
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN products p ON o.product_id = p.product_id
WHERE o.order_date >= '2023-01-01'
AND o.order_date <= '2023-12-31'
GROUP BY c.customer_name, p.product_name;

Analyze the query and suggest improvements to optimize its performance.

Question 5:
You're working with a database for a healthcare system. The following query, which retrieves patient appointment information, is running slowly:

SELECT p.patient_name, d.doctor_name, a.appointment_date
FROM patients p
JOIN appointments a ON p.patient_id = a.patient_id
JOIN doctors d ON a.doctor_id = d.doctor_id
WHERE a.appointment_date >= '2023-01-01'
AND a.appointment_date <= '2023-12-31'
ORDER BY a.appointment_date;

Suggest optimizations to improve the performance of this query.


Question 6:
You're managing a database for a financial platform. The following query retrieves data for generating financial reports and is experiencing performance issues:

SELECT p.portfolio_name, s.stock_symbol, SUM(t.trade_quantity) AS total_quantity
FROM portfolios p
JOIN portfolio_stocks ps ON p.portfolio_id = ps.portfolio_id
JOIN stocks s ON ps.stock_id = s.stock_id
JOIN trades t ON s.stock_id = t.stock_id
WHERE t.trade_date >= '2023-01-01'
AND t.trade_date <= '2023-12-31'
GROUP BY p.portfolio_name, s.stock_symbol;

Suggest optimizations to improve the performance of this query.


Question 7:
You're managing a database for an online store. The following query retrieves the list of products in a specific category and their total sales within a date range. Analyze the query and suggest optimizations to improve its performance.


SELECT p.product_name, SUM(o.quantity) AS total_quantity, SUM(o.amount) AS total_amount
FROM products p
JOIN orders o ON p.product_id = o.product_id
WHERE p.category_id = 5
AND o.order_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY p.product_name;
